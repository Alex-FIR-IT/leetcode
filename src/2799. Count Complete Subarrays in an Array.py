# class Solution(object):
#     def countCompleteSubarrays(self, nums):
#         """
#         :type nums: List[int]
#         :rtype: int
#         """
#
#         minimal_elements_in_array = len(set(nums))
#         diff = len(nums) - minimal_elements_in_array
#
#         complete_subarrays = 0
#
#         if minimal_elements_in_array == 1:
#             for dynamic_subarray_count in range(1, len(nums) + 1):
#                 complete_subarrays += dynamic_subarray_count
#         else:
#             subarray_index = 0
#
#             while subarray_index <= diff:
#                 current_index = 0
#
#                 while current_index <= diff - subarray_index:
#                     subarray = nums[subarray_index:subarray_index + current_index + minimal_elements_in_array]
#
#                     if len(set(subarray)) == minimal_elements_in_array:
#                         complete_subarrays += (diff - subarray_index - current_index + 1)
#                         break
#
#                     current_index += 1
#
#                 subarray_index += 1
#
#         return complete_subarrays
#

from collections import Counter, deque


class Solution(object):
    def countCompleteSubarrays(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        minimal_elements_in_array = len(set(nums))
        max_left_pointer_index = len(nums) - minimal_elements_in_array + 1

        complete_subarrays = 0

        if minimal_elements_in_array == 1:
            for dynamic_subarray_count in range(1, len(nums) + 1):
                complete_subarrays += dynamic_subarray_count
        else:
            counter = Counter(nums)
            stack = []
            nums_deque = deque(nums)

            left_pointer = 0
            complete_subarrays += 1
            moving_to_the_left = True

            print(left_pointer, max_left_pointer_index)
            c = 0
            while left_pointer < max_left_pointer_index or stack:
                print(left_pointer)
                c += 1
                if moving_to_the_left:
                    number = nums_deque.pop()
                    stack.append(number)

                    counter[number] -= 1

                    if counter[number] == 0:
                        left_pointer += 1
                        deleted_left_number = nums_deque.popleft()
                        counter[deleted_left_number] -= 1
                        moving_to_the_left = False
                        continue

                    complete_subarrays += 1
                else:
                    if not stack:
                        break
                    number = stack.pop()
                    nums_deque.append(number)

                    counter[number] += 1

                    if counter[deleted_left_number] > 0:
                        complete_subarrays += len(stack) + 1
                        moving_to_the_left = True
                        continue
        print(f"{c=}\n"
              f"{len(nums)=}")
        return complete_subarrays

#
# class Solution(object):
#     def countCompleteSubarrays(self, nums):
#         """
#         :type nums: List[int]
#         :rtype: int
#         """
#         len_nums, len_set = len(nums), (-1)
#
#         record_set = set(nums)
#
#         record_dict = {}
#
#         record_left_ptr, record_right_ptr = 0, 0
#
#         res_cnter = 0
#
#         len_set = len(record_set)
#
#         while (record_right_ptr < len_nums):
#             if (nums[record_right_ptr] not in record_dict):
#                 record_dict[nums[record_right_ptr]] = 1
#             else:
#                 record_dict[nums[record_right_ptr]] += 1
#
#             while (len(record_dict) >= len_set):
#                 res_cnter += (len_nums - record_right_ptr)
#
#                 record_dict[nums[record_left_ptr]] -= 1
#
#                 if (not record_dict[nums[record_left_ptr]]):
#                     del record_dict[nums[record_left_ptr]]
#                 else:
#                     pass
#
#                 record_left_ptr += 1
#
#             record_right_ptr += 1
#
#         return res_cnter



if __name__ == '__main__':
    # print(Solution().countCompleteSubarrays([1, 3, 1, 2, 2]))
    print(Solution().countCompleteSubarrays([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2]))
    # print(Solution().countCompleteSubarrays([905,1286,1286,1286,1286,1769,1239,367,318,1700,934,1253,974]))
    # print(Solution().countCompleteSubarrays([459,459,962,1579,1435,756,1872,1597]))
    # print(Solution().countCompleteSubarrays([1786,1786,1786,114]))
    # print(Solution().countCompleteSubarrays([356,356,356,356,356,315]))
    # print(Solution().countCompleteSubarrays([905,1286,1286,1286,1286,1769,1239,367,318,1700,934,1253,974,1869,1769,395,375,1682,535,1639,979,1750,974,1766,1286,11,867,1736,1379,1286,7,458,267,1869,1739,1443,1226,1534,1904,1902,615,1759,729,1840,1993,1386,1739,979,1869,1292,1738,67,1406,1314,1012,715,1739,1759,364,629,96,885,1301,112,336,1489,142,740,1516,492,898,415,1123,867,1759,1123,1558,1593,1717,365,1644,979,1806,1759,1252,1627,212,887,986,678,1286,49,1098,736,1802,499,1798,411,1558,20,709,1329,1197,1516,729,1892,526,1739,623,554,730,709,685,1749,483,1252,1286,1123,1606,1739,1470,888,1344,307,1905,1141,1802,1411,893,1332,646,1272,618,1220,414,411,1749,481,1411,1902,986,264,1173,1534,1453,352,1622,1411,1075,208,1286,368,1937,1011,1447,578,190,1558,1071,925,1737,617,1717,128,725,1367,942,398,248,490,633,142,543,1825,1209,898,1516,1794,1392,314,1355,1051,1047,793,1248,1108,1411,669,112,1239,232,1692,469,1314,1387,1029,690,314,1830,1657,1226,181,457,1929,374,1254,968,347,1286,373,1675,1083,929,934,1296,11,1175,713,698,1210,123,159,1611,1082,411,1976,1877,393,786,1187,1692,1355,18,228,1844,887,796,104,1518,1102,1029,1071,1558,372,972,1700,1447,327,1369,1712,1523,247,560,760,898,1447,1515,605,1951,900,243,1639,1326,316,475,1514,830,1133,1558,905,1534,666,352,535,1390,1734,1182,907,1691,270,1739,735,1532,1651,1639,513,316,1483,492,1392,262,1012,1748,148,979,1238,1089,635,1102,495,1516,1742,611,815,1699,1542,1029,898,1301,552,1261,1836,1463,822,954,1179,1654,1429,1823,1123,1700,1513,626,456,1516,1463,901,1759,475,327,240,1959,1967,867,1100,1667,770,123,438,1657,1771,101,1688,283,697,1082,1291,1348,26,1815,687,581,907,790,103,228,737,1909,262,240,1047,1213,582,754,1667,1329,599,629,1098,839,1911,1934,1998,1038,862,473,1314,554,772,31,1742,1139,224,619,4,530,1239,1853,535,982,1082,269,1075,827,475,447,543,614,1444,463,614,1430,782,1494,1123,1762,893,1029,697,1158,1654,1029,940,1294,1902,1574,849,1486,1619,1727,1045,562,1759,382,1143,1688,1869,1338,975,1823,1806,828,1522,1519,264,857,1483,1424,102,903,123,1429,1832,1141,1103,791,923,1973,1754,704,381,1608,624,463,1413,63,30,1055,1226,1823,1929,660,526,147,1209,1739,1107,1065,1187,107,42,562,419,1338,1076,1657,490,222,1366,1035,1072,1933,1168,1300,1818,1766,290,1752,905,1083,1806,446,1082,290,690,1175,1859,1645,380,1517,1829,967,1909,1190,673,847,1892,922,949,1713,1642,1516,1759,828,1467,443,1642,1924,1625,925,446,1274,1694,1390,1098,796,247,986,76,1928,1140,90,1759,335,1657,1514,410,39,327,15,1013,1052,1777,476,898,544,828,703,828,1998,1982,1082,49,811,596,1561,805,867,537,1079,983,1630,1759,1125,19,41,478,1651,1749,1516,1911,117,256,120,159,1740,1120,238,1329,1055,311,293,894,1347,1939,809,678,1090,1395,1750,1437,1199,168,1759,1637,1261,432,646,733,1454,1586,1627,855,590,1013,1098,1255,1807,67,1436,1193,1805,1423,837,1185,954,492,1204,1473,1029,519,1448,1875,359,1644,1738,142,411,1664,1699,314,1263,81,645,392,1429,1070,1429,737,1357,153,1549,1811,102,379,892,336,479,1596,1453,105,1367,1761,1186,1596,637,1834,1904,1248,1366,898,1812,112,1281,990,1735,272,678,592,40,526,1545,1090,1701,997,310,194,815,1226,1568,1120,1225,922,1474,414,1928,336,492,1519,607,1135,335,349,1843,1491,25,351,447,1509,1513,1780,1111,1413,1132,1390,446,1013,825,1141,314,192,393,520,1468,1823,588,1822,329,475,233,1740,757,513,1644,153,338,1293,1034,1772,984,1667,112,1904,1113,1928,855,372,11,252,838,1188,475,90,1895,344,1916,1107,1549,1111,1616,1350,1722,1175,73,1819,1753,446,231,283,702,1332,1387,1563,1924,145,1286,704,614,1491,446,898,530,729,1332,1165,1625,1236,1168,1591,2000,352,1677,1547,520,835,1759,1815,78,1886,448,1690,1987,1029,760,382,895,100,42,1851,290,1254,523,1949,222,793,791,1158,1019,702,789,713,1190,1222,1843,1060,1535,1806,1430,1243,717,576,1796,1772,531,1998,1871,1475,1659,972,1573,898,312,1507,865,1395,1928,1135,71,1828,925,1682,872,973,258,815,835,873,1507,1530,368,934,1188,1473,531,162,233,80,533,1260,245,888,1537,1940,1714,346,1008,760,817,1624,1842,1899,1193,1472,453,1688,1338,1397,522,104,1568,1390,262,1527,1644,1869,1553,1336,1894,318,623,973,28,1226,652,907,1973,940,919,584,3,1139,357,1107,1260,1765,1098,281,801,116,526,1374,1691,1660,112,1796,394,465,1475,122,264,473,256,25,1580,1534,57,596,1625,1269,1622,14,1523,638,588,336,847,334,890,1212,709,504,371,1608,240,1168,1859,1181,25,939,1586,1416,671,1940,107,492,1834,1162,1710,1558,180,552,94,377,124,1098,1987,1803,1971,1851,654,212,705,1055,1856,979,1286,1500,314,1495,1913,73,41,1464,511,1463,728,1969,525,94,1770,584,1890,1667,549,284,264,958,1512,956,262]))